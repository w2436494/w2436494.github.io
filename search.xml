<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>平衡二叉树(AVL)</title>
      <link href="/2021/08/17/ping-heng-er-cha-shu-avl/"/>
      <url>/2021/08/17/ping-heng-er-cha-shu-avl/</url>
      
        <content type="html"><![CDATA[<h2 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h2><h3 id="看一个案例-说明二叉排序树可能的问题"><a href="#看一个案例-说明二叉排序树可能的问题" class="headerlink" title="看一个案例(说明二叉排序树可能的问题)"></a>看一个案例(说明二叉排序树可能的问题)</h3><p>给你一个数列{1,2,3,4,5,6}，要求创建一颗二叉排序树(BST), 并分析问题所在.</p><p>左边 BST 存在的问题分析:</p><p> <img src="/images/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91-AVL/image-20210817133845450.png" alt="image-20210817133845450"></p><p>1）左子树全部为空，从形式上看，更像一个单链表.<br>2）插入速度没有影响<br>3）查询速度明显降低(因为需要依次比较), 不能发挥BST的优势，因为每次还需要比较左子树，其查询速度比单链表还慢<br>**解决方案-平衡二叉树(AVL) **</p><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ol><li><p>平衡二叉树也叫平衡<strong>二叉搜索树</strong>（Self-balancing binary search tree）又被称为 AVL 树， 可以保证查询效率较高。</p></li><li><p>具有以下特点：它是<strong>一 棵空树</strong>或<strong>它的左右两个子树的高度差的绝对值不超过</strong> <strong>1</strong>，并且<strong>左右两个子树都是一棵平衡二叉树</strong>。平衡二叉树的常用实现方法有<strong>红黑树</strong>、AVL算法、替罪羊树、Treap、伸展树等。</p></li><li><p>举例说明, 看看下面哪些 AVL 树, 为什么?</p></li></ol><p><img src="/images/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91-AVL/image-20210817134357736.png" alt="image-20210817134357736"></p><h3 id="应用案例-单旋转-左旋转"><a href="#应用案例-单旋转-左旋转" class="headerlink" title="应用案例-单旋转(左旋转)"></a>应用案例-单旋转(左旋转)</h3><ol><li><p>要求: 给你一个数列，创建出对应的平衡二叉树.数列 {4,3,6,5,7,8}</p></li><li><p>思路分析(示意图)</p></li></ol><p><strong>注：当右子树的高度 减去 左子树高度大于1，则选择左旋转降低右子树的高度，从而达到平衡二叉树。</strong></p><p><img src="/images/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91-AVL/image-20210817151652356.png" alt="image-20210817151652356"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉排序树</title>
      <link href="/2021/08/16/er-cha-pai-xu-shu/"/>
      <url>/2021/08/16/er-cha-pai-xu-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h2><h3 id="先看一个需求"><a href="#先看一个需求" class="headerlink" title="先看一个需求"></a>先看一个需求</h3><p>给你一个数列 (7, 3, 10, 12, 5, 1, 9)，要求能够高效的完成对数据的查询和添加</p><h3 id="解决方案分析"><a href="#解决方案分析" class="headerlink" title="解决方案分析"></a>解决方案分析</h3><p> 使用数组</p><p>数组未排序， 优点：直接在数组尾添加，速度快。 缺点：查找速度慢. </p><p>数组排序，优点：可以使用二分查找，查找速度快，缺点：为了保证数组有序，在添加新数据时，找到插入位置后，后面的数据需整体移动，速度慢。</p><p>使用链式存储-链表</p><p>不管链表是否有序，查找速度都慢，添加数据速度比数组快，不需要数据整体移动。</p><p>使用二叉排序树</p><h3 id="1-二叉排序树介绍"><a href="#1-二叉排序树介绍" class="headerlink" title="1 二叉排序树介绍"></a>1 二叉排序树介绍</h3><p><strong>二叉排序树</strong>：BST: (Binary Sort(Search) Tree), 对于二叉排序树的<strong>任何一个非叶子节点</strong>，要求<strong>左子节点的值比当前节点的值小</strong>，<strong>右子节点的值比当前节点的值大</strong>。</p><p><strong>特别说明</strong>：如果有相同的值，可以将该节点放在左子节点或右子节点</p><p>比如针对前面的数据 (7, 3, 10, 12, 5, 1, 9) ，对应的二叉排序树为：</p><p><img src="/images/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/image-20210816215234920.png" alt="image-20210816215234920"></p><h3 id="二叉排序树创建和遍历"><a href="#二叉排序树创建和遍历" class="headerlink" title="二叉排序树创建和遍历"></a>二叉排序树创建和遍历</h3><p>一个数组创建成对应的二叉排序树，并使用中序遍历二叉排序树，比如: 数组为 Array(7, 3, 10, 12, 5, 1, 9) </p><p>代码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 二叉排序树 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySortTreeDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">BinarySortTree</span> binarySortTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinarySortTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 循环的添加节点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            binarySortTree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中序遍历二叉树"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        binarySortTree<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">BinarySortTree</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> root<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            root <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            root<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            root<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二叉排序树为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 节点类 */</span><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token class-name">Node</span> left<span class="token punctuation">;</span>    <span class="token class-name">Node</span> right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 添加节点     * 递归添加 需要满足二叉排序树的要求     * @param node     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 判断节点的值，和当前子树的根节点的关系</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 当前节点左子节点为空</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 递归向左子树添加</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 添加节点值大于当前节点的值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 递归向右子树添加</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 中序遍历     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Node&#123;"</span> <span class="token operator">+</span>                <span class="token string">"value="</span> <span class="token operator">+</span> value <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二叉排序树的删除"><a href="#二叉排序树的删除" class="headerlink" title="二叉排序树的删除"></a>二叉排序树的删除</h3><p>二叉排序树的删除情况比较复杂，有下面三种情况需要考虑</p><ol><li>   <strong>删除叶子节点</strong> (比如：2, 5, 9, 12)</li></ol><p>2）删除<strong>只有一颗子树的节点</strong> (比如：1)</p><ol start="3"><li><p>删除<strong>有两颗子树的节点</strong>. (比如：7, 3，10 )</p></li><li><p>操作的思路分析</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//对删除结点的各种情况的思路分析:</span>第一种情况<span class="token operator">:</span>删除叶子节点 <span class="token punctuation">(</span>比如：<span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>思路<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>需求先去找到要删除的结点targetNode<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>找到 targetNode 的 父结点 parent<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>确定 targetNode 是 parent 的左子结点 还是右子结点<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>根据前面的情况来对应删除左子结点 parent<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span>右子结点 parent<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>第二种情况<span class="token operator">:</span> 删除只有一颗子树的节点 比如 <span class="token number">1</span>思路<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>需求先去找到要删除的结点targetNode<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>找到 targetNode 的 父结点 parent<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>确定 targetNode 的子结点是左子结点还是右子结点<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>targetNode 是 parent 的左子结点还是右子结点<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>如果 targetNode 有左子结点     <span class="token number">5.0</span> 如果parent为空说明待删除节点是根节点且根节点只有一颗子树<span class="token punctuation">)</span>       root <span class="token operator">=</span> targetNode<span class="token punctuation">.</span>left    <span class="token number">5.</span> <span class="token number">1</span>  如果 targetNode 是 parent 的左子结点    parent<span class="token punctuation">.</span>left <span class="token operator">=</span> targetNode<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token number">5.2</span>如果 targetNode 是 parent 的右子结点    parent<span class="token punctuation">.</span>right <span class="token operator">=</span> targetNode<span class="token punctuation">.</span>left<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> 如果 targetNode 有右子结点      <span class="token number">6.0</span> 如果parent为空说明待删除节点是根节点且根节点只有一颗子树<span class="token punctuation">)</span>     root <span class="token operator">=</span> targetNode<span class="token punctuation">.</span>right    <span class="token number">6.1</span>如果 targetNode 是 parent 的左子结点    parent<span class="token punctuation">.</span>left <span class="token operator">=</span> targetNode<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token number">6.2</span>如果 targetNode 是 parent 的右子结点    parent<span class="token punctuation">.</span>right <span class="token operator">=</span> targetNode<span class="token punctuation">.</span>right情况三 ： 删除有两颗子树的节点<span class="token punctuation">.</span> <span class="token punctuation">(</span>比如：<span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span>，<span class="token number">10</span> <span class="token punctuation">)</span>思路<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>需求先去找到要删除的结点targetNode<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>找到 targetNode 的 父结点 parent<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>从 targetNode 的右子树找到最小的结点  或者从target的左子树找到最大的节点<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>用一个临时变量，将 最小结点<span class="token operator">/</span>最大节点的值保存 temp <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>删除该最小<span class="token operator">/</span>最大结点targetNode<span class="token punctuation">.</span>value <span class="token operator">=</span> temp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><strong>删除节点代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"># <span class="token class-name">Node</span>类  新增代码 <span class="token comment">/**     * 查找待删除节点的父节点     * @param value 待删除节点的值     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">searchParent</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 如果当前节点就是待删除节点的父节点  返回</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token operator">||</span>                <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 查找的值小于当前节点的值，并且当前节点的左子节点不为空</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">searchParent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向左递归查找</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">&lt;=</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">searchParent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 没有父节点</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     *  查找待删除节点     * @param value 待删除节点的value值     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 要查找节点值小于当前节点的值 递归向左子树查找</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 左子树为空 则该元素不存在</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 要查找节点值大于等于当前节点的值 递归向右子树查找</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 右子树为空 则该元素不存在</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"># <span class="token class-name">ThreadBinaryTree</span>类 新增代码# 将<span class="token class-name">Node</span>类的查找待删除节点和待删除节点的父元素封装到<span class="token class-name">ThreadBinaryTree</span>类<span class="token comment">// 查找要删除的节点</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">searchParent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 查找待删除节点的父节点</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">searchParent</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">searchParent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 删除节点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 1需要先查找待删除的节点 targetNode</span>        <span class="token class-name">Node</span> targetNode <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>targetNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 如果当前二叉排序树只有一个节点 执行到这证明已经找到了待删除节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 说明二叉排序树只有一个节点且该节点是待删除节点</span>            root <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 2 查找待删除节点的父节点</span>        <span class="token class-name">Node</span> parent <span class="token operator">=</span> <span class="token function">searchParent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3 判断待删除节点的类型</span>        <span class="token comment">// 3.1如果要删除的节点是叶子节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>targetNode<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> targetNode<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 4 判断待删除节点是父节点的左子节点 还是右子节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>left <span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 左子节点</span>                parent<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>right <span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>right<span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 右子节点</span>                parent<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>targetNode<span class="token punctuation">.</span>left <span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> targetNode<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 3.2.1目标节点有一颗左子树</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//如果parent为空说明待删除节点是根节点且根节点只有一颗子树)</span>               root <span class="token operator">=</span> targetNode<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 4 判断待删除节点是父节点的左子节点 还是右子节点</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>left <span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 左子节点</span>                parent<span class="token punctuation">.</span>left <span class="token operator">=</span> targetNode<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>right <span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>right<span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 右子节点</span>                parent<span class="token punctuation">.</span>right <span class="token operator">=</span> targetNode<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>targetNode<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> targetNode<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 3.2.2待删除节点有一颗右子树</span>            <span class="token comment">// 如果parent为空说明待删除节点是根节点且根节点只有一颗子树</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                root <span class="token operator">=</span> targetNode<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 4 判断待删除节点是父节点的左子节点 还是右子节点</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 左子节点</span>                parent<span class="token punctuation">.</span>left <span class="token operator">=</span> targetNode<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>right<span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 右子节点</span>                parent<span class="token punctuation">.</span>right <span class="token operator">=</span> targetNode<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>targetNode<span class="token punctuation">.</span>left <span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> targetNode<span class="token punctuation">.</span>right <span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 3.3待删除节点有两颗子树  如果删除根节点也是在这</span>            <span class="token comment">// 4 查找待删除节点的右子树的最小值  右子树一值往左边走</span>            <span class="token keyword">int</span> miniValue <span class="token operator">=</span> <span class="token function">delRightTreeMin</span><span class="token punctuation">(</span>targetNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            targetNode<span class="token punctuation">.</span>value <span class="token operator">=</span> miniValue<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     *  返回以node为根节点的二叉排序树的最小节点的值   删除最小节点     * @param node  传入的节点（当作二叉排序树的根节点)     * @return  返回以node为根节点的二叉排序树的最小节点的值     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">delRightTreeMin</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span>  target <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token comment">// 循环查找左节点  就会找到最小值</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            target <span class="token operator">=</span> target<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// target执行最小节点</span>        <span class="token comment">// 删除最小节点</span>        <span class="token function">delNode</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池</title>
      <link href="/2021/08/16/xian-cheng-chi/"/>
      <url>/2021/08/16/xian-cheng-chi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-线程"><a href="#1-线程" class="headerlink" title="1 线程"></a>1 线程</h2><p>概念：就是进程中的一个顺序控制流程，是cpu中的最小执行单位。</p><p>作用：增加cpu的使用效率</p><p>线程的缺点：</p><p>   1）频繁的创建的创建和销毁都会带来性能开销，无法做到的重复利用</p><p>​    2）线程资源不能做到统一管理。</p><p>start方法与run方法的区别。</p><p>创建线程的四种方法</p><p>Thread类：执行任务和线程进行绑定。</p><p>Runable接口</p><p>Callable接口</p><p>线程池</p><h2 id="2-线程池"><a href="#2-线程池" class="headerlink" title="2 线程池"></a>2 线程池</h2><p>池化技术: 数据库连接池、线程池</p><p>常见的线程池：</p><p>通过Executors创建</p><h2 id="3-怎么设计一个线程池"><a href="#3-怎么设计一个线程池" class="headerlink" title="3 怎么设计一个线程池"></a>3 怎么设计一个线程池</h2><p>本质是为了解决线程的两个缺点。</p><p>jdk生产者消费者模型</p><p>阻塞队列：起到一个缓冲作用</p><p>当阻塞</p><p>线程池的工作流程</p><p>创建一个空的线程池</p><p>来任务</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>赫夫曼树</title>
      <link href="/2021/08/16/he-fu-man-shu/"/>
      <url>/2021/08/16/he-fu-man-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><ol><li><p>给定n 个权值作为 n 个叶子结点，构造一棵二叉树，<strong>若该树的带权路径长度(wpl)达到最小</strong>，称这样的二叉树为最优二叉树，也称为哈夫曼树(Huffman Tree), 还有的书翻译为霍夫曼树。</p></li><li><p>赫夫曼树是带权路径长度最短的树，权值较大的结点离根较近</p><h2 id="赫夫曼树几个重要概念和举例说明"><a href="#赫夫曼树几个重要概念和举例说明" class="headerlink" title="赫夫曼树几个重要概念和举例说明"></a>赫夫曼树几个重要概念和举例说明</h2><ol><li><p><strong>路径和路径长度</strong>：在一棵树中，从一个结点往下可以达到的孩子或孙子结点之间的通路，称为路径。通<strong>路中分支的数目称为路径长度</strong>。若规定根结点的层数为 1，则从根结点到第 L 层结点的路径长度为 L-1</p></li><li><p><strong>结点的权及带权路径长度</strong>：若将树中结点赋给一个有着某种含义的数值，则这个数值称为该结点的权。<strong>结点的带权路径长度为</strong>：从根结点到该结点之间的路径长度与该结点的权的乘积</p></li><li><p>树的带权路径长度：树的带权路径长度规定为<strong>所有叶子结点的带权路径长度之和</strong>，记为 WPL(weighted path length) ,权值越大的结点离根结点越近的二叉树才是最优二叉树。</p></li></ol><p>4.WPL 最小的就是赫夫曼树</p><p><img src="/images/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91/image-20210816152104744.png" alt="image-20210816152104744"></p></li></ol><h2 id="赫夫曼树创建思路图解"><a href="#赫夫曼树创建思路图解" class="headerlink" title="赫夫曼树创建思路图解"></a>赫夫曼树创建思路图解</h2><p>给你一个数列 {13, 7, 8, 3, 29, 6, 1}，要求转成一颗赫夫曼树.</p><p> 思路分析(示意图)：</p><p>{13, 7, 8, 3, 29, 6, 1}</p><h5 id="构成赫夫曼树的步骤-："><a href="#构成赫夫曼树的步骤-：" class="headerlink" title="****构成赫夫曼树的步骤****："></a>****构成赫夫曼树的步骤****：</h5><ol><li>从小到大进行排序, 将每一个数据，每个数据都是一个节点 ， 每个节点可以看成是一颗最简单的二叉树</li></ol><p>2.取出根节点权值最小的两颗二叉树</p><ol start="3"><li><p>组成一颗新的二叉树, 该新的二叉树的根节点的权值是前面两颗二叉树根节点权值的和</p></li><li><p>再将这颗新的二叉树，以根节点的权值大小 再次排序， 不断重复    1-2-3-4 的步骤，直到数列中，所有的数据都被处理，就得到一颗赫夫曼树</p></li><li><p>图解:</p><p><img src="/images/%E8%B5%AB%E5%A4%AB%E6%9B%BC%E6%A0%91/image-20210816152452590.png" alt="image-20210816152452590"></p></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">datastructurs<span class="token punctuation">.</span>huffmantree</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuffmanTree</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> root <span class="token operator">=</span> <span class="token function">createHuffmanTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 前序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token class-name">Node</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 创建赫夫曼树的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">createHuffmanTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//为了操作方便</span>        <span class="token comment">// 1.遍历arr数组</span>        <span class="token comment">// 2将arr的每个元素构建成一个Node</span>        <span class="token comment">// 3将Node放入ArrayList中</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>nodes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 排序 从小到大排序</span>            <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 2)取出根节点权值最小的两颗二叉树</span>            <span class="token class-name">Node</span> leftNode <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Node</span> rightNode <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 3)组成一颗新的二叉树, 该新的二叉树的根节点的权值是前面两颗二叉树根节点权值的和</span>            <span class="token class-name">Node</span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>leftNode<span class="token punctuation">.</span>value<span class="token operator">+</span>rightNode<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            parent<span class="token punctuation">.</span>left <span class="token operator">=</span> leftNode<span class="token punctuation">;</span>            parent<span class="token punctuation">.</span>right <span class="token operator">=</span> rightNode<span class="token punctuation">;</span>            <span class="token comment">// 移除取出的最小的两颗二叉树</span>            nodes<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            nodes<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将新的二叉树加入</span>            nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 返回构建的赫夫曼树的头节点</span>        <span class="token keyword">return</span> nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 创建节点类 * 为了让Node 对象实现排序Collections集合排序 * 实现Comparable接口 */</span><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span> <span class="token comment">// 节点的权值</span>    <span class="token class-name">Node</span> left<span class="token punctuation">;</span> <span class="token comment">// 指向左子节点</span>    <span class="token class-name">Node</span> right<span class="token punctuation">;</span> <span class="token comment">// 指向右子节点</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 前序遍历赫夫曼树</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Node&#123;"</span> <span class="token operator">+</span>                <span class="token string">"value="</span> <span class="token operator">+</span> value <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Node</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 从小到大进行排序</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">-</span> o<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆排序</title>
      <link href="/2021/08/15/dui-pai-xu/"/>
      <url>/2021/08/15/dui-pai-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="堆排序基本介绍"><a href="#堆排序基本介绍" class="headerlink" title="堆排序基本介绍"></a>堆排序基本介绍</h2><p>1)堆排序是利用<strong>堆</strong>这种数据结构而设计的一种排序算法，堆排序是一种<strong>选择排序，</strong>它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。</p><p>2)堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆, <strong>注意</strong> : 没有要求结点的左孩子的值和右孩子的值的大小关系。</p><p>3)每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆</p><p>4)大顶堆举例说明</p><p><img src="/images/%E5%A0%86%E6%8E%92%E5%BA%8F/image-20210815221109328.png" alt="image-20210815221109328"></p><p>我们对堆中的结点按层进行编号，映射到数组中就是下面这个样子: </p><p><img src="/images/%E5%A0%86%E6%8E%92%E5%BA%8F/image-20210815221150986.png" alt="image-20210815221150986"></p><p>大顶堆特点：<code>arr[i] &gt;=arr[2*i+1] &amp;&amp;arr[i] &gt;=arr[2*i+2] </code>// <strong>i</strong> 对应第几个节点，i从0开始编号</p><p>5)小顶堆举例说明</p><p><img src="/images/%E5%A0%86%E6%8E%92%E5%BA%8F/image-20210815221503009.png" alt="image-20210815221503009"></p><p>小顶堆特点：<code>arr[i] &lt;= arr[2*i+1] &amp;&amp;arr[i] &lt;= arr[2*i+2] </code>// <strong>i</strong> 对应第几个节点，i从0开始编号</p><p>6)一般<strong>升序采用大顶堆</strong>，<strong>降序采用小顶堆</strong> </p><h2 id="堆排序基本思想"><a href="#堆排序基本思想" class="headerlink" title="堆排序基本思想"></a>堆排序基本思想</h2><p>堆排序的基本思想是：</p><p>1)将待排序序列构造成一个大顶堆（使用数组模拟树存放节点,以大顶堆规则进行操作)</p><p>2)此时，整个序列的最大值就是堆顶的根节点。</p><p>3)将其与末尾元素进行交换，此时末尾就为最大值。</p><p>4)然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了。</p><p>可以看到在构建大顶堆的过程中，元素的个数逐渐减少，最后就得到一个有序序列了.</p><h2 id="堆排序步骤图解说明"><a href="#堆排序步骤图解说明" class="headerlink" title="堆排序步骤图解说明"></a>堆排序步骤图解说明</h2><p>要求：给你一个数组 {4,6,8,5,9} , 要求使用堆排序法，将数组升序排序。</p><p><strong>步骤一</strong>构造初始堆。将给定无序序列构造成一个大顶堆（一般升序采用大顶堆，降序采用小顶堆)。<br>原始的数组[4, 6, 8, 5, 9]</p><p>1)初始无序序列结构如下:</p><p><img src="/images/%E5%A0%86%E6%8E%92%E5%BA%8F/image-20210815222415247.png" alt="image-20210815222415247"></p><p>2）此时我们从最后一个<strong>非叶子节点</strong>（叶子节点不用调整，第一个非叶子节点为arr.length/2-1=5/2-1=1),从左至右，从下至上调整。</p><p><img src="/images/%E5%A0%86%E6%8E%92%E5%BA%8F/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95.jpg" alt="Java数据结构和算法"></p><ol start="3"><li><p>找到第二个非叶节点4，由于[4,9,8]中9 元素最大，4 和9 交换。</p><p><img src="/images/%E5%A0%86%E6%8E%92%E5%BA%8F/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-16290777139681.jpg" alt="Java数据结构和算法"></p></li></ol><ol start="4"><li>这时，交换导致了子根[4,5,6]结构混乱，继续调整，[4,5,6]中6 最大，交换4 和6。<img src="/images/%E5%A0%86%E6%8E%92%E5%BA%8F/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-16290777831862.jpg" alt="Java数据结构和算法"></li></ol><p>此时，我们就将一个无序序列构造成了一个大顶堆。</p><p><strong>步骤二</strong>将堆顶元素与末尾元素进行交换，使末尾元素最大。然后继续调整堆，再将堆顶元素与末尾元素交换，得到第二大元素。如此反复进行交换、重建、交换。</p><p>1）.将堆顶元素9 和末尾元素4 进行交换<img src="/images/%E5%A0%86%E6%8E%92%E5%BA%8F/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-16290779131243.jpg" alt="Java数据结构和算法"></p><ol start="2"><li><p>.重新调整结构，使其继续满足堆定义<img src="/images/%E5%A0%86%E6%8E%92%E5%BA%8F/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-16290779706344.jpg" alt="Java数据结构和算法"></p></li><li><p>.再将堆顶元素8 与末尾元素5 进行交换，得到第二大元素8.<img src="/images/%E5%A0%86%E6%8E%92%E5%BA%8F/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-16290780050865.jpg" alt="Java数据结构和算法"></p></li></ol><p>4).后续过程，继续进行调整，交换，如此反复进行，最终使得整个序列有序<img src="/images/%E5%A0%86%E6%8E%92%E5%BA%8F/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-16290780423986.jpg" alt="Java数据结构和算法"></p><p>堆排序的基本思路总结：<br>1).将无序序列构建成一个堆，根据升序降序需求选择大顶堆或小顶堆;<br>2).将堆顶元素与末尾元素交换，将最大元素”沉”到数组末端;<br>3).重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整+交换步骤，<br>直到整个序列有序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">datastructurs<span class="token punctuation">.</span>tree</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// &#123;4,6,8,5,9,-1,90,89,56&#125;</span>        <span class="token function">heapSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 编写堆排序的方法     * @param arr     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"堆排序!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 1将无序数组构建成一个堆，根据升序或降序构建大顶堆或小顶堆</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 遍历次数为 非叶子节点个数</span>            <span class="token function">adjustHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组="</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 2).将堆顶元素与末尾元素交换，将最大元素"沉"到数组末端;         * 3).重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整+交换步骤，         * 直到整个序列有序。         */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token function">adjustHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"堆排序结果="</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 将一个数组（二叉树），调整成一个大顶堆     * 功能: 完成将以i 对应的非叶子节点的树调整成大顶堆     * 举例: int[] arr = &#123;4,6,8,5,9&#125;; => i=1 =>adjustHeap=>得到&#123;4,9,8,5,6&#125;     * 如果我们再次调用 adjustHeap传入的是 i=0 =>得到&#123;9,6,8,5,4&#125;     * @param arr 待调整数组     * @param i   表示非叶子节点在数组中的索引     * @param length 表示对多少个元素进行调整，length在逐渐减少     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">adjustHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 先取出当前元素的值，保存为临时变量</span>        <span class="token comment">// 开始调整</span>        <span class="token comment">// k = i*2+1 是i节点的左子节点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> k <span class="token operator">=</span> k<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 说明左子节点的值小于右子节点</span>                k<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 指向右子节点</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 此时子节点的值大于父节点的值</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                i<span class="token operator">=</span>k<span class="token punctuation">;</span>  <span class="token comment">// !!! i指向k,继续循环比较</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// for循环结束 我们已经将以i为节点的树调整为大顶堆，（局部）</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度为O(nlogN),堆排序的速度非常快。</p><pre class="line-numbers language-none"><code class="language-none">public static void main(String[] args) &#123;        &#x2F;&#x2F;int[] arr &#x3D; &#123;4,6,8,5,9&#125;;        &#x2F;&#x2F; &#123;4,6,8,5,9,-1,90,89,56&#125;        int[] arr &#x3D; new int[8000000];        for (int i &#x3D; 0; i &lt; 8000000; i++) &#123;            arr[i] &#x3D; (int)(Math.random() * 8000000);        &#125;        Date now &#x3D; new Date();        SimpleDateFormat sf &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd hh:mm:ss&quot;);        System.out.println(&quot;排序前的时间&quot;+sf.format(now));        heapSort(arr);        Date end &#x3D; new Date();        System.out.println(&quot;排序后的时间&quot;+sf.format(end));    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>排序前的时间2021-08-16 12:53:46<br>堆排序!!!<br>排序后的时间2021-08-16 12:53:49</p><p>从测试结果可以看出8百万的数据，时间为3秒。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构  堆排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2021/08/14/zheng-ze-biao-da-shi/"/>
      <url>/2021/08/14/zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">* 正则表达式:* 正则表达式是用来描述一个字符串的内容格式,使用它通常用来匹配一个字符串的内容是否符合* 格式要求.* 基本语法:* []:表示一个字符,该字符可以是[]中指定的内容* 例如:* [abc]:这个字符可以是a或b或c* [a-z]:表示任意一个小写字母* [a-zA-Z]:表示任意一个字母* [a-zA-Z0-9_]:表示任意一个数字字母下划线* [^abc]:该字符只要不是a或b或c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">* 预定义字符* .:&quot;.&quot;表示任意一个字符,没有范围限制* \d:表示任意一个数字,等同于[0-9]* \w:表示任意一个单词字符,等同于[a-zA-Z0-9_]* \s:表示任意一个空白字符.* \D:表示不是数字* \W:不是单词字符* \S:不是空白字符** 量词:* ?:表示前面的内容出现0-1次* 例如:* [abc]? 可以匹配:a 或 b 或 c 或什么也不写** +:表示前面的内容出现1次以上* [abc]+ 可以匹配:aaaaaaaaaa...或abcabcbabcbabcbabcbabbabab....*        但是不能匹配:什么都不写或abcfdfsbbaqbb34bbwer...** *:表示前面的内容出现任意次(0-多次)*   匹配内容与+一致,只是可以一次都不写.** &#123;n&#125;:表示前面的内容出现n次* 例如:* [abc]&#123;3&#125; 可以匹配:aaa 或 bbb 或 aab*          不能匹配:aaaa或aad** &#123;n,m&#125;:表示前面的内容出现最少n次最多m次* [abc]&#123;3,5&#125; 可以匹配:aaa 或  abcab 或者 abcc*            不能匹配:aaaaaa 或 aabbd** &#123;n,&#125;:表示前面的内容出现n次以上(含n次)* [abc]&#123;3,&#125; 可以匹配:aaa 或 aaaaa.... 或 abcbabbcbabcbabcba....*           不能匹配:aa 或 abbdaw...** ()用于分组,是将括号内的内容看做是一个整体* 例如:* (abc)&#123;3&#125; 表示abc整体出现3次. 可以匹配abcabcabc.*          不能匹配aaa 或abcabc** (abc|def)&#123;3&#125;表示abc或def整体出现3次.*          可以匹配: abcabcabc 或 defdefdef 或 abcdefabc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">* String支持正则表达式的方法之一:* boolean matches(String regex)* 使用给定的正则表达式验证当前字符串是否满足格式要求,满足则返回true.否则返回false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>列如美团面试题对用户名进行检查：</p><p>用户名的首字符必须是大写或者小写字母。</p><p>用户名只能包含大小写字母，数字。</p><p>用户名需要包含至少一个字母和一个数字。</p><p><code>String regex = &quot;^[a-zA-Z]&#123;1&#125;[a-zA-Z0-9]+$&quot;; ^表示匹配开始的位置 $匹配结束位置</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UsernameMatch</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 输入接收</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 消除换行符</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 用户名检测</span>        <span class="token comment">// 大小写字母开头  只包含数字字母</span>        <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">"^[a-zA-Z]&#123;1&#125;[a-zA-Z0-9]+$"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 1 用户名的首字符必须是大写或者小写字母。</span>            <span class="token comment">// a-z:97-122,A-Z:65-90,0-9:48-57</span>            <span class="token comment">// 3 用户名需要包含至少一个字母和一个数字。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">containsNum</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 4 如果用户名合法，请输出 "Accept"，反之输出 "Wrong"。</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Accept"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Wrong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 至少包含一个字母和数字</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">containsNum</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">>=</span><span class="token number">48</span> <span class="token operator">&amp;&amp;</span> name<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;=</span><span class="token number">57</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux教程续3</title>
      <link href="/2021/08/14/linux-jiao-cheng-xu-3/"/>
      <url>/2021/08/14/linux-jiao-cheng-xu-3/</url>
      
        <content type="html"><![CDATA[<h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><h3 id="1-VMware网络环境"><a href="#1-VMware网络环境" class="headerlink" title="1 VMware网络环境"></a>1 VMware网络环境</h3><p> 1 检查虚拟网络编辑器</p><p>以管理员身份运行VMware </p><p>打开编辑-&gt;虚拟网络编辑器</p><p>查看NAT方式下，虚拟子网的网段,如192.168.220.0</p><p><img src="/images/linux%E6%95%99%E7%A8%8B%E7%BB%AD3/image-20210814131517987.png" alt="image-20210814131517987"></p><p>2 检查虚拟网卡</p><p>控制面板，“网络与共享中心-&gt;更改适配器设置”,默认的有VMnet1和VMnet8两个虚拟网卡,在虚拟机上网需要借助这两个网卡。</p><p>如果没有找到VMnet1和VMnet8，需要卸载VMware重装。</p><p><img src="/images/linux%E6%95%99%E7%A8%8B%E7%BB%AD3/image-20210814132139228.png" alt="image-20210814132139228"></p><p>注:以管理员方式运行安装程序会更好。</p><p>3 检查虚拟机的网络配置：NAT方式</p><p>编辑虚拟机设置<img src="/images/linux%E6%95%99%E7%A8%8B%E7%BB%AD3/image-20210814132507923.png" alt="image-20210814132507923"></p><p>这3个设置都是安装虚拟机时的默认设置。</p><h3 id="2虚拟机联网"><a href="#2虚拟机联网" class="headerlink" title="2虚拟机联网"></a>2虚拟机联网</h3><p>虚拟机联网设置：</p><p>1 检查虚拟机硬件是否为NAT方式<img src="/images/linux%E6%95%99%E7%A8%8B%E7%BB%AD3/image-20210814133054490.png" alt="image-20210814133054490"></p><p>2 登录Ubuntu系统，桌面左上角设置 –&gt;网络</p><p><img src="/images/linux%E6%95%99%E7%A8%8B%E7%BB%AD3/image-20210814133638250.png" alt="image-20210814133638250"></p><p>检查ipv4/dhcp设置（默认设置即可)。<img src="/images/linux%E6%95%99%E7%A8%8B%E7%BB%AD3/image-20210814133659940.png" alt="image-20210814133659940"></p><p>3 访问外网进行测试</p><p>ping <a href="http://www.baidu.com/">www.baidu.com</a></p><p>可以按ctrl+c中断。该工程宿主机必须以及联网。</p><h3 id="3与宿主机互联"><a href="#3与宿主机互联" class="headerlink" title="3与宿主机互联"></a>3与宿主机互联</h3><p>3.1 检查IP地址</p><p>虚拟机IP地址 192.168.220.128</p><p>宿主机IP地址</p><p><img src="/images/linux%E6%95%99%E7%A8%8B%E7%BB%AD3/image-20210814171543449.png" alt="image-20210814171543449"></p><p>3.2 虚拟机与宿主机互联</p><p>192.168.220.1 –&gt; 192.168.220.128</p><p>ping 192.168.220.128  测试成功,说明Windows访问Ubuntu没有问题。</p><pre class="line-numbers language-none"><code class="language-none">C:\Users\Administrator&gt;ping 192.168.220.128正在 Ping 192.168.220.128 具有 32 字节的数据:来自 192.168.220.128 的回复: 字节&#x3D;32 时间&lt;1ms TTL&#x3D;64来自 192.168.220.128 的回复: 字节&#x3D;32 时间&lt;1ms TTL&#x3D;64来自 192.168.220.128 的回复: 字节&#x3D;32 时间&lt;1ms TTL&#x3D;64来自 192.168.220.128 的回复: 字节&#x3D;32 时间&lt;1ms TTL&#x3D;64192.168.220.128 的 Ping 统计信息:    数据包: 已发送 &#x3D; 4，已接收 &#x3D; 4，丢失 &#x3D; 0 (0% 丢失)，往返行程的估计时间(以毫秒为单位):    最短 &#x3D; 0ms，最长 &#x3D; 0ms，平均 &#x3D; 0ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>192.168.220.128 –&gt; 192.168.220.1</p><p>ping 192.168.220.1 </p><pre class="line-numbers language-none"><code class="language-none">w@ubuntu21:~$ ping 192.168.220.1PING 192.168.220.1 (192.168.220.1) 56(84) bytes of data.# ping不通，因为Ubuntu不支持ping操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以提供火狐连浏览器访问宿主机的端口：如，下面4000端口为hexo博客的默认端口</p><p><a href="http://192.168.220.1:4000/">http://192.168.220.1:4000/</a></p><p><img src="/images/linux%E6%95%99%E7%A8%8B%E7%BB%AD3/image-20210814172720010.png" alt="image-20210814172720010"></p><p>因此虚拟机和宿主机已经是互联的。</p><h3 id="4-手动配置网络"><a href="#4-手动配置网络" class="headerlink" title="4 手动配置网络"></a>4 手动配置网络</h3><p>在终端里，以命令行的方式来配置网络。常用命令有ifconfig,netstat等</p><p>ubuntu系统默认不带ifconfig命令，需要使用apt软件包管理</p><pre class="line-numbers language-none"><code class="language-none">sudo apt install net-tools 安装一个软件包sudo apt remove net-tools  移除一个软件包sudo apt search xxx        搜索sudo apt list | grep xxx   列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4.1 查看网络配置<code>ifconfig</code> 其中，if表示interface网络接口。</p><p>执行该命令会列出所有的网络接口，以及各个接口的状态。</p><p>4.2 开启禁用网络</p><pre class="line-numbers language-none"><code class="language-none">sudo ifconfig xxx upsudo ifconfig xxx down<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="文本编辑工具vi"><a href="#文本编辑工具vi" class="headerlink" title="文本编辑工具vi"></a>文本编辑工具vi</h2><p>在前面我们使用的文本编辑器是Ubuntu自带的gedit,它是一个基于GUI的文本编辑器。</p><p>而在实际工作中只能通过控制台去使用Ubuntu，所有vi/vim是一个基于控制台的文本编辑器。vim是vi的升级版。</p><p>常用操作：</p><p>1 打开文本编辑器</p><p><code>vim abc.txt</code>  如果目标文件存在，则打开编辑；如果不存在，会新建一个文件。</p><p>如果系统上没有vim,就安装一下vim</p><p><code>sudo apt install vim</code> </p><p>因为该文本编辑工具是基于控制台的，所有需要现有ssh服务器环境，没有的话建议先安装。</p><p>远程操作是不能使用gedit命令，因为gedit是基于GUI的。</p><p>2 切换模式</p><p>编辑模式 Insert Mode：按i键</p><p>命令模式Command Mode:按ESC键</p><p>3 退出模式</p><p>(1) 按ESC，进入命令模式</p><p>(2) 输入 <code>:wq</code>  保存并推出</p><p>​      输入 <code>:q</code>   退出</p><p>​      输入 <code>:q!</code>  强制退出(放弃保存)</p><p>4 vim 更多用法</p><p>vim的完全用法非常复杂，几乎键盘上的每一个键都是快捷键。</p><p>不建议深入研究，vim本身是一个低效率的工具。</p><p>总结：</p><p>Linux文本文件的编辑</p><p>1 桌面环境：gedit</p><p>2 终端环境: 少量修改：vim</p><p>大量修改：在Windows上编辑，然后上次到Linux上。</p><h3 id="文本文件的上传"><a href="#文本文件的上传" class="headerlink" title="文本文件的上传"></a>文本文件的上传</h3><p>使用ftp服务器或者ssh服务器上传</p><p>Windows:<code>\r\n</code></p><p>Linux:<code>\n</code></p><p>因为Linux与Windows文件换行符的格式不同，所以上传前需要做一个换行符转换操作。</p><p><strong>注：只有在编辑shell脚本时需要转换</strong></p><p>其他格式文件一般不需要转换，如*.xml, *.java。</p><h2 id="Java-开发环境"><a href="#Java-开发环境" class="headerlink" title="Java 开发环境"></a>Java 开发环境</h2><h3 id="1、JDK-JRE安装"><a href="#1、JDK-JRE安装" class="headerlink" title="1、JDK/JRE安装"></a>1、JDK/JRE安装</h3><p>运行java命令和javac可以查看jre和jdk是否安装。</p><p>JRE安装：<code>sudo apt install openjdk-8-jre-headless</code></p><p>JDK:<code>sudo apt install openjdk-8-jdk-headless </code></p><p>默认放在/usr/bin下，不需要额外配置PATH，可以</p><p>通过命令<code>ls /usr/bin/java</code>或者java查看</p><h3 id="2、运行Java程序"><a href="#2、运行Java程序" class="headerlink" title="2、运行Java程序"></a>2、运行Java程序</h3><p>​     这里现在Windows上写好Java文件</p><p>​     2.1 、发布</p><p>​      class文件</p><p>​      普通jar文件/可执行JAR文件</p><p>两种JAR文件运行方式命令不同</p><pre class="line-numbers language-none"><code class="language-none">java -cp 文件名.jar  your.MainClassjava -jar 文件名.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.2 上传到Linux：FTP／SETP</p><p>2.3 运行程序</p><pre class="line-numbers language-none"><code class="language-none">w@ubuntu21:~$ java -jar meituan.jar123w@ubuntu21:~$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注：</p><p>1 程序里需要访问系统文件时，如/etc/。以及需要开启TCP端口，如80,都要使用root运行。</p><p>2 Java GUI程序不能在终端运行</p><h3 id="3、Java程序的运行脚本"><a href="#3、Java程序的运行脚本" class="headerlink" title="3、Java程序的运行脚本"></a>3、Java程序的运行脚本</h3><p>一般情况在Linux系统运行Java程序，通常使用Java脚本，这样运行Java程序会更方便。</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux教程续2</title>
      <link href="/2021/08/12/linux-jiao-cheng-xu-2/"/>
      <url>/2021/08/12/linux-jiao-cheng-xu-2/</url>
      
        <content type="html"><![CDATA[<h2 id="用户管理操作"><a href="#用户管理操作" class="headerlink" title="用户管理操作"></a>用户管理操作</h2><h3 id="1、添加用户"><a href="#1、添加用户" class="headerlink" title="1、添加用户"></a>1、添加用户</h3><p>添加一个用户</p><p><code>sudo useradd -m test1</code></p><p>其中 sudo,表示以管理员身份进行。其中-m参数表示在/home下添加用户</p><p>2 修改用户密码</p><p><code>sudo passwd test1</code></p><p>3 删除用户</p><p><code>sudo userdel test1</code></p><p>删除用户后需要删除用户目录 sudo rm -rf /home/test1</p><p>4 在登录系统时，默认不允许以root用户登录，避免使用root登录导致系统出现问题。</p><p>5 只有特殊用户，才能执行sudo,如当前可以使用w用户执行sudo,但test1不行</p><p>Linux下，把能执行sudo命令的用户称作sudoer。</p><h3 id="2、超级用户-根用户root"><a href="#2、超级用户-根用户root" class="headerlink" title="2、超级用户/根用户root"></a>2、超级用户/根用户root</h3><p>类似于Windows下的Administrator用户。切换到root用户，有全部权限，可以直接使用useradd等命令。</p><p>1 首次使用需要给root用户设置一个密码</p><p><code>sudo passwd root</code>  我这里设为12345678方便记忆。</p><p>2 切换到root用户</p><p><code>su root</code> 其中su 表示switch user</p><p>3 退出</p><p><code>exit</code></p><p>root用户的权限很大，为了保证安全，用完后应该尽快退出root用户。</p><h3 id="3、用户组"><a href="#3、用户组" class="headerlink" title="3、用户组"></a>3、用户组</h3><p>Linux下可以创建多个用户，可以用组进行管理用户。每个组可以设置不同的权限。</p><p>比如：</p><p>男生组 boys 。将后面四个用户添加到该组ming bo gang qiang。</p><p>1 创建组</p><p><code>groupadd boys</code></p><p>2 创建用户同时添加到组</p><p><code>useradd -m -g  boys ming</code>  其中-g表示添加用户 同时将用户添加到boys组</p><p>3 修改现有用户到新的组</p><p><code>usermod -g boys w </code> 其中，usermod表示修改用户信息</p><p>4 查看用户和组</p><p><code>cat /etc/group</code></p><p>每一行表示一个group的信息，名称+id</p><p>5 查看用户列表</p><p><code>cat /etc/passwd</code> 每一行表示一个用户</p><p>用户不多时，管理时候并不使用组的概念。useradd a1。</p><p>系统默认会给a1建立一个同名的组a1,也就是a1组只有a1用户。</p><h3 id="4-root用户登录桌面"><a href="#4-root用户登录桌面" class="headerlink" title="4 root用户登录桌面"></a>4 root用户登录桌面</h3><p>Ubuntu默认不允许root登录桌面环境。root设置了密码。</p><pre class="line-numbers language-none"><code class="language-none">w@ubuntu21:~$ su root #切换到root用户密码： root@ubuntu21:&#x2F;home&#x2F;w# gedit &#x2F;etc&#x2F;pam.d&#x2F;gdm-autologin  #执行命令 gedit是文本编辑器程序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>会进入一个文本</p><pre class="line-numbers language-none"><code class="language-none">#%PAM-1.0auth    requisite       pam_nologin.so#authrequiredpam_succeed_if.so user !&#x3D; root quiet_success  #注释该行，保存authoptionalpam_gdm.soauthoptionalpam_gnome_keyring.soauth    required        pam_permit.so@include common-account# SELinux needs to be the first session rule. This ensures that any # lingering context has been cleared. Without this it is possible # that a module could execute code in the wrong domain.session [success&#x3D;ok ignore&#x3D;ignore module_unknown&#x3D;ignore default&#x3D;bad]        pam_selinux.so closesession required        pam_loginuid.so# SELinux needs to intervene at login time to ensure that the process# starts in the proper default security context. Only sessions which are# intended to run in the user&#39;s context should be run after this.session [success&#x3D;ok ignore&#x3D;ignore module_unknown&#x3D;ignore default&#x3D;bad]        pam_selinux.so opensession optional        pam_keyinit.so force revokesession required        pam_limits.sosession required        pam_env.so readenv&#x3D;1session required        pam_env.so readenv&#x3D;1 user_readenv&#x3D;1 envfile&#x3D;&#x2F;etc&#x2F;default&#x2F;locale@include common-sessionsession optional        pam_gnome_keyring.so auto_start@include common-password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在root用户下再次执行命令</p><pre class="line-numbers language-none"><code class="language-none">gedit &#x2F;etc&#x2F;pam.d&#x2F;gdm-password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开后注释第三行</p><pre class="line-numbers language-none"><code class="language-none">#authrequiredpam_succeed_if.so user !&#x3D; root quiet_success<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭虚拟机重启后，即可使用root用户进行登录。</p><p>登录时选择未列出输入root,在输入密码即可。第一次进入需要初始化。</p><h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><h3 id="1-文件权限查看"><a href="#1-文件权限查看" class="headerlink" title="1 文件权限查看"></a>1 文件权限查看</h3><pre class="line-numbers language-none"><code class="language-none">-ower : 文件的属主，拥有者-r:文件是否可读read-w:文件是否可写write-x:文件是否可执行excute<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用ls命令查看用户权限</p><p><code>ls -l simple.txt</code></p><pre class="line-numbers language-none"><code class="language-none">w@ubuntu21:~$ ls -l linux使用教程.md-rw------- 1 w boys 2067  8月 11 22:11 linux使用教程.md# -rw 表示用户权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">w@ubuntu21:~$ ls -l#总用量 52drwxr-xr-x 2 w boys 4096  8月 11 11:43 公共的-rw-rw-r-- 1 w boys  135  8月 12 10:34 example.tar.gz# 用户权限  文件里面的子项 用户名 用户所在群组  文件大小(字节)  文件创建时间  文件名第一个字母是：         d:该项是一个目录directory         l:该项是一个链接link         -:该项是一个文件rw- r-- r--权限三部分：自己|同组|别人分别拥有的权限（从左往右每3个字符）如：d rwx rwx r-x #r可读 w可写  x可执行- rw- --- --- <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2文件权限修改"><a href="#2文件权限修改" class="headerlink" title="2文件权限修改"></a>2文件权限修改</h3><p>chmod,即change file mode 修改文件的访问权限</p><p>比如，文件simple.txt,想让别人也能修改</p><p><code>chmod o+w simple.txt</code>其中o表示other,+w表示增写权限</p><p><code>chmod o-w simple.txt</code> 减去写权限</p><pre class="line-numbers language-none"><code class="language-none">chmod a+w simple.txt  #所有人添加w权限chmod a-w simple.txt  #所有人减去w权限chmod u+w simple.txt #仅仅用户user自己添加w权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注：只有文件的属主或者root用户可以修改文件权限</p><p>省略写法：</p><p>chmod +w simple.txt</p><p>chmod -w simple.txt 默认是修改自己和本组的权限。</p><h3 id="3修改文件属主"><a href="#3修改文件属主" class="headerlink" title="3修改文件属主"></a>3修改文件属主</h3><p>chown,即change owner修改文件的属主</p><p>一般来说，每个用户只操作自己的用户目录，所以chown命令不常用。</p><p>如：在/opt下创建一个目录software ,将其分配给w用户</p><pre class="line-numbers language-none"><code class="language-none">w@ubuntu21:~$ su root密码： root@ubuntu21:&#x2F;home&#x2F;w# mkdir &#x2F;opt&#x2F;softwareroot@ubuntu21:&#x2F;home&#x2F;w# ls -ld &#x2F;opt&#x2F;softwaredrwxr-xr-x 2 root root 4096  8月 12 19:54 &#x2F;opt&#x2F;softwareroot@ubuntu21:&#x2F;home&#x2F;w# chown -R w &#x2F;opt&#x2F;softwareroot@ubuntu21:&#x2F;home&#x2F;w# ls -ld &#x2F;opt&#x2F;softwaredrwxr-xr-x 2 w root 4096  8月 12 19:54 &#x2F;opt&#x2F;software<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有文件的owner 和root 才有权限修改属主。</p><h2 id="脚本程序"><a href="#脚本程序" class="headerlink" title="脚本程序"></a>脚本程序</h2><p>脚本Script，一种解释执行的程序。</p><p>Linux下常见的三种脚本程序。</p><p>Shell脚本 *.sh</p><p>Per脚本 *.pl</p><p>Python脚本 *.py</p><p>脚本程序，本质是一个文本文件。且具有可执行的权限。</p><p>脚本程序的都是由解释器执行的</p><p>shell脚本解释器：/bin/sh</p><p>Per脚本解释器: /bin/perl</p><p>Python脚本解释器: /bin/python3</p><p>执行一个脚本时，下面两种方式等效</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;hello.py&#x2F;bin&#x2F;python3 hello.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-shell脚本"><a href="#1-shell脚本" class="headerlink" title="1 shell脚本"></a>1 shell脚本</h3><p>shell脚本，就是按shell语法写出来的脚本，是Linux自带的脚本语言。</p><p>相当于Windows下的dos批处理脚本。</p><p>1 编辑文本文件，保存为.sh</p><pre class="line-numbers language-none"><code class="language-none">#！&#x2F;bin&#x2F;shecho &quot;hello world&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2 添加可执行权限</p><p>chmod +x hello.sh</p><p>3 执行程序</p><p>./hello.sh</p><p>注：</p><p>第一行必须声明解释器</p><p>#!/bin/sh</p><p>必须有x权限，才能够执行</p><p>执行程序时，必须加上路径</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;hello.sh&#x2F;home&#x2F;w&#x2F;hello.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-python脚本"><a href="#2-python脚本" class="headerlink" title="2 python脚本"></a>2 python脚本</h3><p>python脚本，比shell脚本强大。</p><p>1 编辑一个文本文件 ，保存为.py</p><p>   第一行加上解释器路径 #!/bin/python3</p><p>2 添加可执行权限</p><p>chmod +x hello.py</p><p>3 执行程序</p><p>./hello.py</p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><h3 id="1-shell中的变量"><a href="#1-shell中的变量" class="headerlink" title="1 shell中的变量"></a>1 shell中的变量</h3><p>1 定义变量</p><p>2执行命令echo ls cd cp</p><p>3 if判断逻辑，while循环逻辑</p><p>4 自定义函数…</p><h3 id="2环境变量"><a href="#2环境变量" class="headerlink" title="2环境变量"></a>2环境变量</h3><pre class="line-numbers language-none"><code class="language-none">以下命令在终端执行定义环境变量export OUTDIR&#x3D;&#x2F;opt&#x2F;显示环境变量echo $&#123;OUTDIR&#125;查看所有环境变量printenv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>环境变量的使用：</p><p>可以在当前终端中使用</p><p>可以在shell脚本中使用</p><p>在命令行定义的环境变量，只对当前shell终端有效，当关闭终端后，重启就消失了。如果需要让环境变量在重启后也能使用，可以定义为用户环境变量。</p><h3 id="3用户环境变量"><a href="#3用户环境变量" class="headerlink" title="3用户环境变量"></a>3用户环境变量</h3><p>用户环境变量：定义在~/.profile中</p><p>在主目录下 <code>ls -la</code> 其中，a表示all,显示所有文件</p><p>注：在Linux下，以.开头的文件为隐藏文件</p><pre class="line-numbers language-none"><code class="language-none">ls -la&#x2F;ls -a-rw-r--r--  1 w    boys  807  8月 11 10:51 .profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>gedit .profile</code>可以打开文本编辑器。</p><p>进入后可以在文本最后添加用户环境变量：如：</p><pre class="line-numbers language-none"><code class="language-none"># 定义一个java_home的环境变量export JAVA_HOME &#x3D;&#x2F;opt&#x2F;jdk1.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>设置完后注销用户，再重新登录才能生效。</p><p>原理：当用户打开终端时，会自动运行.profile，将变量注入当前环境中。</p><p>用户环境变量只对当前用户有效，因为每个用户都有自己的.profile文件</p><p>有的linux系统上，使用.bash_profile。</p><h3 id="4系统环境变量"><a href="#4系统环境变量" class="headerlink" title="4系统环境变量"></a>4系统环境变量</h3><p>系统环境变量对所有用户对有效。</p><p>系统环境变量：定义在/etc/profile中</p><p>以root身份运行gedit /etc/profile</p><p>但，一般不直接修改/etc/profile,而是在/etc/profile.d/创建一个自定义脚本。</p><pre class="line-numbers language-none"><code class="language-none">root@ubuntu21:&#x2F;home&#x2F;w# gedit &#x2F;etc&#x2F;profile.d&#x2F;myprofile.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注销重新登录，就会生效。</p><h3 id="5-path环境变量"><a href="#5-path环境变量" class="headerlink" title="5 path环境变量"></a>5 path环境变量</h3><p>path环境变量是使用最多的一个。用于描述可执行程序的搜索路径。</p><p>echo $PATH</p><p>多个路径之间以冒号隔开</p><p><code>/usr/local/bin/:/usr/local/sbin/:/usr/bin/:/usr/sbin/</code></p><p>系统默认从以下目录搜索可执行程序</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;bin  比如，&#x2F;user&#x2F;bin&#x2F;tar(tar命令存放于&#x2F;usr&#x2F;bin&#x2F;下)&#x2F;usr&#x2F;sbin 比如,&#x2F;user&#x2F;sbin&#x2F;useradd&#x2F;usr&#x2F;local&#x2F;bin&#x2F;usr&#x2F;local&#x2F;sbin其中,sbin为超级用户root才能执行的程序&#x2F;usr&#x2F;下系统自带的程序，&#x2F;usr&#x2F;local&#x2F;是用户安装的程序。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改PATH环境变量：</p><p>1 root用户编辑/etc/profile.d/myprofile.sh</p><p>设定 path环境变量</p><p><code>export PATH=$PATH:/opt/tomcat/bin</code>  $取出原来的值，再在其后添加一个</p><p>2 注销当前用户，重新登录生效。</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux使用教程</title>
      <link href="/2021/08/11/linux-shi-yong-jiao-cheng/"/>
      <url>/2021/08/11/linux-shi-yong-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="虚拟机常用操作"><a href="#虚拟机常用操作" class="headerlink" title="虚拟机常用操作"></a>虚拟机常用操作</h2><h3 id="1、虚拟机的挂起和恢复"><a href="#1、虚拟机的挂起和恢复" class="headerlink" title="1、虚拟机的挂起和恢复"></a>1、虚拟机的挂起和恢复</h3><p>​        挂起相当于将当前虚拟机冻结（各种配置保存),在需要时可以快速恢复。如果是直接关闭虚拟机的话，每次启动虚拟机都会耗费很多时间。</p><h3 id="2、硬件参数的设置"><a href="#2、硬件参数的设置" class="headerlink" title="2、硬件参数的设置"></a>2、硬件参数的设置</h3><p>建议：先关闭虚拟机，再修改配置</p><p><img src="/images/linux%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20210811201840311.png" alt="image-20210811201840311"></p><h3 id="3、快照和系统恢复"><a href="#3、快照和系统恢复" class="headerlink" title="3、快照和系统恢复"></a>3、快照和系统恢复</h3><p>当系统出现严重错误怎么办？</p><p>1、重装系统</p><p>优点：操作简单</p><p>缺点：Ubuntu系统的重装会比较耗时。原来系统的配置，文件以及数据没了。</p><p>2、系统快照：VMware提供的系统功能</p><p>当系统出现问题的时候可以使用最近一次的快照进行恢复。</p><h2 id="Linux系统操作"><a href="#Linux系统操作" class="headerlink" title="Linux系统操作"></a>Linux系统操作</h2><p>​       Linux可以用作个人桌面（办公，看视频，听音乐…),但其主要还是用于服务器环境。常用应用：文件管理器、命令行终端、文本编辑器</p><h3 id="1、文件系统"><a href="#1、文件系统" class="headerlink" title="1、文件系统"></a>1、文件系统</h3><p>对windows来说，每个分区有一个盘符。每一个盘符实际上是一个分区partition。</p><p>在Linux下没有C:等盘符概念。Linux使用统一的目录树结构。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;home&#x2F;w #用户目录&#x2F;root&#x2F;bin&#x2F;mnt&#x2F;user&#x2F;etc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-1、用户目录"><a href="#1-1、用户目录" class="headerlink" title="1.1、用户目录"></a>1.1、用户目录</h4><p>用户目录，即用户自己的目录。如用户w用户目录为<code>/home/w</code> 。Linux系统上可以支持多个用户，每个用户有一个目录。特例：超级用户root，其用户目录为<code>/root</code>。</p><p>权限机制：对普通用户来说，他能操作的目录只有用户目录。root用户没有限制可以操作任何文件和目录。</p><h3 id="2、Linux常用命令"><a href="#2、Linux常用命令" class="headerlink" title="2、Linux常用命令"></a>2、Linux常用命令</h3><pre class="line-numbers language-none"><code class="language-none">ls&#x2F;cd&#x2F;pwd #目录切换和查看mkdir&#x2F;rmdir #目录的创建和删除cp&#x2F;rm&#x2F;mv #复制 删除 移动tar&#x2F;zip&#x2F;unzip #压缩 解压ln...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="查看目录ls"><a href="#查看目录ls" class="headerlink" title="查看目录ls"></a>查看目录ls</h5><p>ls,即list,列出目录下的所有项：如   查看当前目录 ls, 查看/home/w目录<code>ls /home/w</code></p><h5 id="详细模式查看-ls-l-home-w"><a href="#详细模式查看-ls-l-home-w" class="headerlink" title="详细模式查看 ls  -l /home/w"></a>详细模式查看 ls  -l /home/w</h5><p>其中 -l 为参数  参数一般义 -开头</p><pre class="line-numbers language-none"><code class="language-none">w@ubuntu21:~$ ls -l &#x2F;home&#x2F;w总用量 36drwxr-xr-x 2 w w 4096  8月 11 11:43 公共的drwxr-xr-x 2 w w 4096  8月 11 11:43 模板drwxr-xr-x 2 w w 4096  8月 11 11:43 视频drwxr-xr-x 2 w w 4096  8月 11 11:43 图片drwxr-xr-x 2 w w 4096  8月 11 11:43 文档drwxr-xr-x 2 w w 4096  8月 11 11:43 下载drwxr-xr-x 2 w w 4096  8月 11 11:43 音乐drwxr-xr-x 2 w w 4096  8月 11 11:43 桌面drwxr-xr-x 3 w w 4096  8月 11 11:44 snap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在输入命令和路径时，按tab建可以自动补全。如 ls /ho -&gt; ls /home</p><p>按上下键可以翻阅输入历史的历史命令</p><h5 id="显示当前位置pwd"><a href="#显示当前位置pwd" class="headerlink" title="显示当前位置pwd"></a>显示当前位置pwd</h5><p>pwd,即print working directory 显示当前工作目录</p><h5 id="切换目录cd"><a href="#切换目录cd" class="headerlink" title="切换目录cd"></a>切换目录cd</h5><p>cd，change directory 切换目录</p><p>切换到用户主目录：直接cd</p><p>切换到某个目录：cd /home/w/snap</p><pre class="line-numbers language-none"><code class="language-none">几个特殊目录~ 代表当前用户的主目录. 代表当前目录.. 代表上一节目录cd ~ 切换到用户主目录,和cd一样cd ~&#x2F;snap 切换到主目录下的snap目录cd ..&#x2F;www 切换到上级目录，再到www子目录在ls命令中,也可以使用~ ...表示路径ls ~ls .&#x2F;www还有更复杂的 .&#x2F;hello&#x2F;abc&#x2F;...&#x2F;123&#x2F;.&#x2F;other&#x2F;test.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h5><p>mkdir，即make directory创建目录</p><p>mkdir abc</p><p>mkdir -p abc/123/test</p><p>使用-p参数，可以将路径的层次目录全部创建</p><p>rmdir，即remove directory删除目录</p><p>rmdir abc 如果目录非空，则删除失败</p><p>rm ,即 remove 删除文件或目录</p><p>rm -rf abc  删除abc,和子项一起删除</p><p>其中,r表示recursion(递归删除)，f表示force (强制删除)</p><pre class="line-numbers language-rm" data-language="rm"><code class="language-rm">rm -rf &#x2F;* 删除根目录下的所有东西（慎用)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>cp,即copy复制文件或者目录</p><p>cp -rf snap  snap2  </p><p>强制递归复制snap，如果snap2不存在则会创建snap2,如果snap2存在则会将sanp的内容复制到snap2下。</p><p>mv,即move ,移动文件或者目录（重命名)</p><p>move hello helloworld</p><p><code>rm/cp/mv</code>这三个命令对文件同样适用</p><h5 id="归档：备份"><a href="#归档：备份" class="headerlink" title="归档：备份"></a>归档：备份</h5><p>在Linux系统重要的程序或者文件需要备份，首先将其打包为一个文件（tar包），让后在将tar文件备份到某个位置。</p><p>tar,即tape(磁带) archive(档案) 档案打包</p><p>创建档案包</p><pre class="line-numbers language-none"><code class="language-none">tar -cvf example.tar example<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中c,表示create创建档案</p><p>v,表示verbose显示详情</p><p>f,表示file</p><p>也可以将多个目录打包 tar -cvf xxx.tar file1 file2 file3</p><p>还原档案包（解压压缩包)</p><pre class="line-numbers language-none"><code class="language-none">tar -xvf example.tartar -xvf example.tar -C outdir其中,-C参数指定目标目录(C大写表示切换一个目录)，默认解压到当前目录下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面的tar格式并没有压缩，体积较大。所以可以通过归档并压缩</p><h5 id="归档并压缩"><a href="#归档并压缩" class="headerlink" title="归档并压缩"></a>归档并压缩</h5><pre class="line-numbers language-none"><code class="language-none">tar -czvf example.tar.gz example 参数z表示压缩 先归档在使用gz压解压缩tar -xzvf example.tar.gztar -xzvf example.tar.gz -C outdir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="软链接，相当于Windows下的快捷方式"><a href="#软链接，相当于Windows下的快捷方式" class="headerlink" title="软链接，相当于Windows下的快捷方式"></a>软链接，相当于Windows下的快捷方式</h5><p>使用ln命令（link）来创建软链接</p><p><code>ln -s source link</code> 其中，-s表示soft软链接（默认为硬)，除了软链接还有硬链接。</p><p>如：<code>ln -s example example2</code></p><p>删除软链接对原文件没有影响。</p><p>删除原文件，则软链接失效。</p><p>以ls -l查看文件详情时，可以看到文件目标路径,查看当前文件是否是软链接</p><p>比如，ls  -l  /</p><p>可以发现，/bin 实际指向/user/bin</p><pre class="line-numbers language-none"><code class="language-none">lrwxrwxrwx   1 root root          7  8月 11 10:41 bin -&gt; usr&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="宿主机和虚拟机之间的拷贝粘贴"><a href="#宿主机和虚拟机之间的拷贝粘贴" class="headerlink" title="宿主机和虚拟机之间的拷贝粘贴"></a>宿主机和虚拟机之间的拷贝粘贴</h5><p>一般情况下，文本和文件都可以拷贝</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux操作系统安装</title>
      <link href="/2021/08/10/linux-cao-zuo-xi-tong-an-zhuang/"/>
      <url>/2021/08/10/linux-cao-zuo-xi-tong-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="1、先安装虚拟机VMware"><a href="#1、先安装虚拟机VMware" class="headerlink" title="1、先安装虚拟机VMware"></a>1、先安装虚拟机VMware</h2><p>链接: <a href="https://pan.baidu.com/s/1zAjd1lsAjLG32PfF-4AjYA">https://pan.baidu.com/s/1zAjd1lsAjLG32PfF-4AjYA</a> 提取码: 3ymx 复制这段内容后打开百度网盘手机App，操作更方便哦</p><p>我这里安装C盘，C盘是固态盘且我的容量比较大，所以启动时候速度会比较快</p><p><img src="/images/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/image-20210810225534695.png" alt="image-20210810225534695"></p><p>一路下一步直接安装。</p><p>接下来激活软件：</p><p><img src="/images/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/image-20210810230040538.png" alt="image-20210810230040538"></p><p><img src="/images/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/image-20210810230109353.png" alt="image-20210810230109353"></p><p> 双击激活软件将获取到密钥填入即可，激活软件和VMware在在网盘链接里都有。</p><p>开启cpu的虚拟化，可通过<code>任务管理器-&gt;性能查看</code>,开启方法百度 xxx电脑开启虚拟化。</p><h2 id="2、安装Ubuntu"><a href="#2、安装Ubuntu" class="headerlink" title="2、安装Ubuntu"></a>2、安装Ubuntu</h2><p>点击创建虚拟机，默认下一步，选择下载好镜像文件</p><p><img src="/images/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/image-20210811095140213.png" alt="image-20210811095140213"></p><p>下一步选择安装位置</p><p><img src="/images/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/image-20210811095513926.png" alt="image-20210811095513926"></p><p>选择容量下一步</p><p><img src="/images/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/image-20210811100150805.png" alt="image-20210811100150805"></p><p>点击完成进行安装</p><p><img src="/images/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/image-20210811100301824.png" alt="image-20210811100301824"></p><p><img src="/images/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/image-20210811100404836.png" alt="image-20210811100404836"></p><p>出现该错误，说明cpu的虚拟化没有开启,重启电脑，按住先按住fn+点按f2进入bios</p><p><img src="https://webdoc.lenovo.com.cn/lenovowsi/new_cskb/uploadfile/20150619010806425.jpg" alt="进入BIOS，选择configuration的选项，找到Intel  Virtual  Technology，改成Enable的开启状态"></p><p>再次启动虚拟机。基本上一路傻瓜式安装，</p><p><img src="/images/linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/image-20210811104507501.png" alt="image-20210811104507501"></p><p>密码根据自己喜好设置，我为方便记忆设置为 ubuntu2104</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>icarus主题使用及优化</title>
      <link href="/2021/08/10/icarus-zhu-ti-shi-yong-ji-you-hua/"/>
      <url>/2021/08/10/icarus-zhu-ti-shi-yong-ji-you-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>icarus主题地址 ：<code>https://github.com/ppoffice/hexo-theme-icarus</code>。打开后，可直接选择下载压缩包。想要其他主题可以在GitHub上搜索<strong>hexo-theme</strong>。</p><p><img src="/images/icarus%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%E5%8F%8A%E4%BC%98%E5%8C%96/image-20210810142118309.png" alt="image-20210810142118309"></p><p>​     将下载的文件解压，复制到<code>/theme/</code>中,主题文件夹过长可以重命名为icarus。</p><p>下载方式2：在cmd下到博客根目录下执行命令：</p><pre class="line-numbers language-none"><code class="language-none">cd bloggit clone https:&#x2F;&#x2F;github.com&#x2F;ppoffice&#x2F;hexo-theme-icarus.git themes&#x2F;icarus <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后修改Hexo根目录下的配置文件<code>_config.yml</code>中的themes参数 <code>theme: icarus</code></p><p>重新使用命令即可本地预览效果</p><p><code>hexo g</code> 和<code>hexo s</code>。</p><p><img src="/images/icarus%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%E5%8F%8A%E4%BC%98%E5%8C%96/image-20210810143415851.png" alt="image-20210810143415851"></p><p>输入命令后发现如图的报错，说明Icarus主题的依赖没有安装。通过下面的命令安装</p><p><code>npm install --save bulma-stylus@0.8.0 hexo-component-inferno@^0.4.0 hexo-renderer-inferno@^0.1.3 inferno@^7.3.3 inferno-create-element@^7.3.3</code></p><p>安装完成后再次启动服务。</p><p><code>ERROR Package hexo-component-inferno&#39;s version (0.4.0) does not satisfy the required version (^0.13.0).  ERROR Please install the missing dependencies your Hexo site root directory:</code></p><p>再次报错，<code>hexo-component-inferno</code>是0.4.0不是要求的0.13.0。</p><p>百度进入<code>hexo-component-inferno</code> 进入<code>https://www.npmjs.com/package/hexo-component-inferno</code></p><p><img src="/images/icarus%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%E5%8F%8A%E4%BC%98%E5%8C%96/image-20210810144801533.png" alt="image-20210810144801533"></p><p>复制安装命令<code>npm install hexo-component-inferno --save</code>到命令行下执行。再次重启服务。</p><p><strong>found 1 low severity vulnerability run <code>npm audit fix</code> to fix them, or <code>npm audit</code> for details</strong></p><p><code>npm audit fix  npm audit fix --force  npm audit</code> 再次重启ok。</p><p>方法2：删除已经安装的：node_modules 和 package-lock.json<br>修改 package.json 格式如下<br><code>npm audit fix --force  npm instal</code></p><h2 id="界面美化"><a href="#界面美化" class="headerlink" title="界面美化"></a>界面美化</h2><p>1、在hexo博客的根目录下的配置文件做如下修改</p><pre class="line-numbers language-none"><code class="language-none">sitetitle: 17&#39;s blog #网站标题subtitle: Maker &amp; Developer #网站副标题description: This is a blog in order to record my learning and growth. #网站描述keywords:author: 程序员17 #作者language: zh-CN #网站语言 中文汉字timezone: Asia&#x2F;Beijing #时区 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、在icarus的根目录下的配置文件做修改</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客注意事项</title>
      <link href="/2021/08/09/hexo-bo-ke-zhu-yi-shi-xiang/"/>
      <url>/2021/08/09/hexo-bo-ke-zhu-yi-shi-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo博客教程"><a href="#hexo博客教程" class="headerlink" title="hexo博客教程"></a>hexo博客教程</h2><p>1、新建文章</p><p>cmd进入博客所在文件的根目录下：如<code>D:\blog</code></p><pre class="line-numbers language-none"><code class="language-none">hexo new &quot;文章名字&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建文章所在目录<code> \source\_posts</code></p><p>写好文章后，接下来清理一下</p><pre class="line-numbers language-none"><code class="language-none">hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后生成</p><pre class="line-numbers language-none"><code class="language-none">hexo generate  简写 hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h2><pre class="line-numbers language-none"><code class="language-none">clean     Remove generated files and cache. config    Get or set configurations. deploy    Deploy your website. generate  Generate static files. help      Get help on a command. init      Create a new Hexo folder. list      List the information of the site migrate   Migrate your site from other system to Hexo. new       Create a new post. publish   Moves a draft post from _drafts to _posts folder. render    Render files with renderer plugins. server    Start the server. version   Display version information.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="typora编写Hexo插入的图片无法正常显示"><a href="#typora编写Hexo插入的图片无法正常显示" class="headerlink" title="typora编写Hexo插入的图片无法正常显示"></a>typora编写Hexo插入的图片无法正常显示</h2><p>hexo博客文件均保存在 <code>hexo/_posts/</code>文件夹下</p><p>首先在 <code>hexo &gt; source</code>目录下建一个文件夹叫images，用来保存博客中的图片。</p><p>然后打开Typora的 <code>文件 &gt; 偏好设置</code>，进行如下设置。</p><p><img src="/images/hexo%E5%8D%9A%E5%AE%A2%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/image-20210809202626324.png" alt="image-20210809202626324"></p><p>完成上面的操作后，博客中的图片都将会保存到 <code>/source/images/</code>该博客md文件名/图片名称</p><p>但是仅仅这样设置还不够，这样设置在typora中倒是能看图片了，但是使用的却是相对于当前md文件的相对路径，可是如果启动hexo，是要用服务器访问的，而服务器显然无法根据这个相对路径正确访问到图片，因此还需要在typora中进行进一步设置。</p><p>在typora菜单栏点击 <code>格式-&gt;图像-&gt;设置图片根目录</code>，将<code>hexo/source</code>作为其根目录即可。</p><p>完成上面操作后将hexo博客部署到服务器后图片就可以正常显示了。</p><h4 id="hexo-d部署项目到git上报错解决"><a href="#hexo-d部署项目到git上报错解决" class="headerlink" title="hexo d部署项目到git上报错解决"></a>hexo d部署项目到git上报错解决</h4><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">fatal: unable to access &#39;https:&#x2F;&#x2F;github.com&#x2F;w2436494&#x2F;w2436494.github.io&#x2F;&#39;: OpenSSL SSL_read: Connection was reset, errno 10054FATAL &#123;  err: Error: Spawn failed      at ChildProcess.&lt;anonymous&gt; (D:\blog\node_modules\hexo-util\lib\spawn.js:51:21)      at ChildProcess.emit (events.js:375:28)      at ChildProcess.cp.emit (D:\blog\node_modules\cross-spawn\lib\enoent.js:34:29)      at Process.ChildProcess._handle.onexit (internal&#x2F;child_process.js:277:12) &#123;    code: 128  &#125;&#125; Something&#39;s wrong. Maybe you can find the solution here: %s https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;troubleshooting.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复制下面的命令在命令行执行后即可再次部署。</p><pre class="line-numbers language-none"><code class="language-none">git config --global --unset http.proxy git config --global --unset https.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>今天又是美好的一天</p><p><img src="/images/hexo%E5%8D%9A%E5%AE%A2%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/1157740.jpg" alt="1157740"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/07/13/hello-world/"/>
      <url>/2021/07/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
